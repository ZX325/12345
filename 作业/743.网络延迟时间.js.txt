const MAX = 99999999

function dijkstra(adj, visited, dis, n, k) {
  
  dis[k-1] = 0
  // visited[k] = true 

  let t = -1
  for(let i = 0; i < n; ++i) {
    // 找到与起点（原点）最近的点，t为该点的下标
    // 其实第一轮查找，t 找到的就是k，因为只有dis[k] == 0，其它都为MAX
    // 所以上面不能给k的visited赋值true，否则找不到k
    t = -1
    for(let j = 0; j < n; ++j) {
      if (!visited[j] && (t == -1 || dis[j] < dis[t])) {
        t = j
      }
    }

    visited[t] = true

    // 有新节点t加入后，其他节点与起点的最短距离就有变化了
    // 下面进行更行
    for(let i = 0; i < n; ++i) {
      // 新加入的节点t 与 当前i节点的距离
      // adj[t][i]为Nan是因为t和i不连通，所以取MAX
      let t2i = isNaN(adj[t][i]) ? MAX : adj[t][i]
      // i 节点与起点（原点）的最短距离
      let iMin = dis[i]
      // t 节点与起点（原点）点最短距离 
      let tMin = dis[t]
      if (tMin + t2i < iMin) { // 加入了t节点后，i节点与起点的距离更小了
        dis[i] = tMin + t2i
      }
    }
  }
}

/**
 * @param {number[][]} times
 * @param {number} n
 * @param {number} k
 * @return {number}
 */
var networkDelayTime = function(times, n, k) {
  if (n == 0) return -1
  if (n == 1) return 0
  
  // 下标所对应的点是否加入了最短路径
  let visited = new Array(n)
  // 下标所对应的点离原点（起点）的距离
  let dis = new Array(n)

  for(let i = 0; i < n; ++i) {
    visited[i] = false
    dis[i] = MAX
  }

  // 建立邻接矩阵
  let adj = []
  for(let i = 0; i < n; ++i) {
    adj.push(new Array(n))
  }
  for(let time of times) {
    // 这里要对下标进行-1处理
    adj[time[0]-1][time[1]-1] = time[2]
  }

  dijkstra(adj, visited, dis, n, k)

  let maxDis = 0
  for(let i of dis) {
    if (i == MAX) { // 有节点不可达
      return -1
    }

    maxDis = Math.max(maxDis, i)
  }
  
  return maxDis
};

